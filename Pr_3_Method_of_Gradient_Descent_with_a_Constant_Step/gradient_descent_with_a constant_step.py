import math
from sympy import diff, Symbol


def round_value(value):
    return round(value, 6)


def count_target_function(x, y):
    # target_function = 10 * x ** 2 + 3 * x * y + y ** 2 + 10 * y  # 7
    # target_function = x**2 - x*y + 3*y**2-x
    target_function = 2.8 * y ** 2 + 1.9 * x + 2.7 * x ** 2 + 1.6 - 1.9 * y
    return round_value(target_function)


def calculating_the_derivative_for_x():
    x = Symbol('x')
    y = 0
    target_function = 2.8 * y ** 2 + 1.9 * x + 2.7 * x ** 2 + 1.6 - 1.9 * y
    result_diff = str(target_function.diff(x))
    return result_diff


def calculating_the_derivative_for_y():
    y = Symbol('y')
    x = 0
    target_function = 2.8 * y ** 2 + 1.9 * x + 2.7 * x ** 2 + 1.6 - 1.9 * y
    result_diff = str(target_function.diff(y))
    return result_diff


def count_grad_target_function(value_x, value_y):
    massive_derivative_calculating = []
    for index in range(2):
        if index == 0:
            derivative = calculating_the_derivative_for_x()
            x = value_x
        elif index == 1:
            derivative = calculating_the_derivative_for_y()
            y = value_y
        print(f'–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –¥–ª—è {index} –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {derivative}')
        relust = round_value(eval(f'{derivative}'))
        print(f'–ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –¥–ª—è {index} –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Ä–∞–≤–Ω–∞ {relust}')
        massive_derivative_calculating.append(relust)
    return massive_derivative_calculating


def generate_new_coordinate(mass, grad, mass_h):
    print(mass)
    new_coordinate = [0, 0]
    for k in range(2):
        print(f'{round_value(mass[k] - mass_h[-1] * grad[k])} = {mass[k]} - {mass_h[-1]} * {grad[k]}')
        new_coordinate[k] = mass[k] - mass_h[-1] * grad[k]
        new_coordinate[k] = round_value(new_coordinate[k])
    print(f'–ù–æ–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º [{new_coordinate[0]}; {new_coordinate[1]}]')
    new_coordinate.append(count_target_function(new_coordinate[0], new_coordinate[1]))
    print(f'–¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {new_coordinate[-1]}\n\n')
    return new_coordinate


def condition_end_search(mass, iteration):
    print(f'–ü—Ä–æ–≤–µ—Ä–∏–º —É—Å–ª–æ–≤–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞.\n'
          f'–î–ª—è —ç—Ç–æ–≥–æ –≤—ã—á–∏—Å–ª–∏–º –≤–µ–∫—Ç–æ—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ ‚àáf(x{len(mass) - 1}) –≤ —Ç–æ—á–∫–µ'
          f' x({len(mass) - 1})\n')
    mass_grad.append(count_grad_target_function(mass[-1][0], mass[-1][1]))
    print(f'–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ‚àáf(x{len(mass) - 1}): [{mass_grad[-1][0]}; {mass_grad[-1][1]}]\n')
    return find_norm_gradient_vector(mass, mass_grad[-1], e, iteration)


def find_norm_gradient_vector(mass, grad, e, iteration):
    print(f'–ù–∞–π–¥–µ–º –Ω–æ—Ä–º—É –≤–µ–∫—Ç–æ—Ä–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞ x{len(mass) - 1}')
    norm = round_value(math.sqrt((grad[0] ** 2) + (grad[1] ** 2)))
    print(f'norm = ‚àö(({grad[0]}**2) + ({grad[1]} ** 2)) = {norm}')
    if norm >= e:
        print(f'norm = {norm} >= {e}')
        print('–ò—Ç–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è.\n\n\n')
        return iteration
    else:
        print(f'norm = {norm} < {e}')
        print('–ò—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è.\n\n\n')
        return True


def changing_the_function(mass, new_coordinate, grad, h, iteration):
    if new_coordinate[-1] < mass[-1][-1]:
        print(f'–ü–æ—Å–∫–æ–ª—å–∫—É –∏ f(x{len(mass)}) < f(x{len(mass) - 1})')
        print(f'–£—Å–ª–æ–≤–∏–µ —É–±—ã–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n')
        mass.append(new_coordinate)
        return condition_end_search(mass, iteration)
    else:
        print(f'–ü–æ—Å–∫–æ–ª—å–∫—É –∏ f(x{len(mass)}) > f(x{len(mass) - 1})')
        print(f'–£—Å–ª–æ–≤–∏–µ —É–±—ã–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n'
              f'–£–º–µ–Ω—å—à–∏–º –≤–µ–ª–∏—á–∏–Ω—É —à–∞–≥–∞ h = h/2 = {mass_h[-1] / 2}\n')
        mass_h.append(mass_h[-1] / 2)
        print(f'–ü–æ–≤—Ç–æ—Ä–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–∫–∏ x[{len(mass)}]')
        new_coordinate = generate_new_coordinate(mass[-1], mass_grad[-1], mass_h)
        print(f'–°—Ä–∞–≤–Ω–∏–º f(x{len(mass) - 1}) –∏ f (ùë•({len(mass)}))')
        return changing_the_function(mass, new_coordinate, mass_grad[-1], mass_h, iteration)


if __name__ == '__main__':
    mass = [[1, 1]]
    n = len(mass[0])  # —Ä–∞–∑–º–µ—Ä–æ—Å—Ç—å
    h = 0.4  # –Ω–∞—á–∞–ª—å–Ω–∞—è –≤–µ–ª–∏—á–∏–Ω–∞ —à–∞–≥–∞
    mass_h = [h]
    count_h = 0
    e = 0.1  # —Ç–æ—á–Ω–æ—Å—Ç—å
    symbols = [Symbol('x'), Symbol('y')]
    grad = 0
    mass_grad = []

    iteration = 0

    print(f'–í—ã—á–∏—Å–ª–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f(x{len(mass) - 1})\n')
    mass[-1].append(count_target_function(mass[-1][0], mass[-1][1]))
    print(f'–ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ f(x{len(mass) - 1}) = {mass[-1][2]}\n')
    print(f'–í—ã—á–∏—Å–ª–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç ‚àáf(x{len(mass) - 1})')
    mass_grad.append(count_grad_target_function(mass[-1][0], mass[-1][1]))
    print(f'–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ ‚àáf(x{len(mass) - 1}): [{mass_grad[-1][0]}; {mass_grad[-1][1]}]\n')

    # while iteration != 2:
    while iteration is not True:
        print('=' * 100)
        print('–ò—Ç–µ—Ä–∞—Ü–∏—è =', iteration)
        print('=' * 100)
        iteration += 1
        print(f'–ù–∞–π–¥–µ–º –Ω–æ–≤—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x[{len(mass)}]\n')
        new_coordinate = generate_new_coordinate(mass[-1], mass_grad[-1], mass_h)
        print(f'–°—Ä–∞–≤–Ω–∏–º f(x{len(mass) - 1}) –∏ f (ùë•({len(mass)}))')
        if changing_the_function(mass, new_coordinate, grad, h, iteration) is True:
            iteration = True
